#!/usr/bin/env ruby
#
# Bootloader for wmii configuration.
#
#--
# Copyright protects this work.
# See LICENSE file for details.
#++

# create a logger to aid debugging
require 'logger'
LOG = Logger.new(__FILE__ + '.log', 5)

# capture standard outputs in logger
[STDOUT, STDERR].each do |stream|
  original = stream.method(:write)

  (class << stream; self; end).class_eval do
    define_method :write do |s|
      LOG << s
      original.call s
    end

    alias_method :<<, :write
  end
end

##
# Reloads the entire wmii configuration.
#
def reload_config
  LOG.info 'reload'
  exec $0
end

begin
  LOG.info 'birth'

  # load configuration library
    def find_config file
      base_dirs = ENV['WMII_CONFPATH'].to_s.split(/:+/).
                  push(File.dirname(__FILE__)) # failsafe

      ruby_dirs = base_dirs.map {|dir| File.join(dir, 'ruby') }

      Dir["{#{base_dirs.zip(ruby_dirs).join(',')}}/#{file}"].first
    end

    require find_config('config.rb')

  # terminate any existing wmiirc
    fs.event.write 'Start wmiirc'

    event 'Start' do |arg|
      exit if arg == 'wmiirc'
    end

  # apply user configuration
    load_config find_config('config.yaml')

  # setup tag bar (buttons that correspond to views)
    fs.lbar.clear
    tags.each {|t| event 'CreateTag', t }
    event 'FocusTag', curr_tag

  # register key bindings
    fs.keys.write keys.join("\n")
    event('Key') {|*a| key(*a) }

  # the main event loop
    fs.event.each_line do |line|
      line.split("\n").each do |call|
        name, args = call.split(' ', 2)

        argv = args.to_s.split(' ')
        event name, *argv
      end
    end

rescue SystemExit
  # ignore it; the program wants to terminate

rescue Errno::EPIPE => e
  LOG.error e
  LOG.info 'Lost connection to wmii.  Attempting to reconnect...'
  reload_config

rescue Exception => e
  LOG.error e

  # allow the user to rescue themselves
  system 'xterm &'

  IO.popen('xmessage -nearmouse -file - -buttons Recover,Ignore -print', 'w+') do |f|
    f.puts e.inspect, e.backtrace
    f.close_write

    if f.read.chomp == 'Recover'
      reload_config
    end
  end

ensure
  LOG.info 'death'
end
